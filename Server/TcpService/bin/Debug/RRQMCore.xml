<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RRQMCore</name>
    </assembly>
    <members>
        <member name="T:RRQMCore.ByteManager.ByteBlock">
            <summary>
            字节块流
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.BytesCollection">
            <summary>
            该字节流块所属集合，若值为null则意味着该流块未被管理，可能会被GC
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Buffer">
            <summary>
            字节实例
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Using">
            <summary>
            使用状态
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.CanRead">
            <summary>
            可读取
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.CanSeek">
            <summary>
            支持查找
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.CanWrite">
            <summary>
            可写入
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Length">
            <summary>
            流长度
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Position">
            <summary>
            流位置
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Read(System.Byte[])">
            <summary>
            读取数据
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.Byte[])">
            <summary>
            写入
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ToArray">
            <summary>
            转换为有效内存
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Flush">
            <summary>
            无实际效果
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置流位置
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.SetLength(System.Int64)">
            <summary>
            该方法无意义
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Dispose">
            <summary>
            回收资源
            </summary>
        </member>
        <member name="T:RRQMCore.ByteManager.BytePool">
            <summary>
            字节池
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.#ctor(System.Int64,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="maxSize">字节池最大值</param>
            <param name="maxBlockSize">单个Block最大值</param>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="maxSize">字节池最大值</param>
        </member>
        <member name="P:RRQMCore.ByteManager.BytePool.BlockCount">
            <summary>
            块数量
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.BytePool.MaxSize">
            <summary>
            允许的内存池最大值,默认为10M Byte
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.BytePool.MaxBlockSize">
            <summary>
            单个块最大值，默认为1K Byte
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.BytePool.ActualSize">
            <summary>
            当前内存池实际长度
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.BytePool.CreatedBlockSize">
            <summary>
            已创建的块的最大值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.GetByteBlock(System.Int64,System.Boolean)">
            <summary>
            获取ByteBlock
            </summary>
            <param name="byteSize">长度</param>
            <param name="equalSize">要求长度相同</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.GetByteBlock(System.Int64)">
            <summary>
            获取ByteBlock
            </summary>
            <param name="byteSize"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.GetByteBlock">
            <summary>
            获取任意长度的空闲ByteBlock，如果没有空闲，则创建一个最大单元
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.ByteManager.BytesCollection">
            <summary>
            字节块集合
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.BytesCollection.BytePool">
            <summary>
            所属字节池
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.BytesCollection.Get">
            <summary>
            获取当前实例中的空闲的Block
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytesCollection.Add(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            向当前集合添加Block
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="T:RRQMCore.ByteManager.BytesDictionary">
            <summary>
            字节块集合字典索引。
            </summary>
        </member>
        <member name="T:RRQMCore.Concurrent.ConcurrentList`1">
            <summary>
            线程安全的List
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMCore.Concurrent.ConcurrentList`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMCore.Concurrent.ConcurrentList`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:RRQMCore.Concurrent.ConcurrentList`1.Count">
            <summary>
            获取集合中包含的元素数。
            </summary>
        </member>
        <member name="P:RRQMCore.Concurrent.ConcurrentList`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:RRQMCore.Concurrent.ConcurrentList`1.Add(`0)">
            <summary>
            将某项添加到 System.Collections.Generic.ICollection`1 中。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:RRQMCore.Concurrent.ConcurrentList`1.Clear">
            <summary>
            从 System.Collections.Generic.ICollection`1 中移除所有项。
            </summary>
        </member>
        <member name="M:RRQMCore.Concurrent.ConcurrentList`1.Contains(`0)">
            <summary>
            确定 System.Collections.Generic.ICollection`1 是否包含特定值。
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Concurrent.ConcurrentList`1.CopyTo(`0[],System.Int32)">
            <summary>
            从特定的 System.Collections.Generic.ICollection`1 索引处开始，将 System.Array 的元素复制到一个 System.Array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:RRQMCore.Concurrent.ConcurrentList`1.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Concurrent.ConcurrentList`1.IndexOf(`0)">
            <summary>
            确定 System.Collections.Generic.IList`1 中特定项的索引。
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Concurrent.ConcurrentList`1.Insert(System.Int32,`0)">
            <summary>
            在 System.Collections.Generic.IList`1 中的指定索引处插入一个项。
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:RRQMCore.Concurrent.ConcurrentList`1.Remove(`0)">
            <summary>
            从 System.Collections.Generic.ICollection`1 中移除特定对象的第一个匹配项。
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Concurrent.ConcurrentList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
             从 System.Collections.Generic.List`1 中移除一定范围的元素。
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:RRQMCore.Concurrent.ConcurrentList`1.RemoveAt(System.Int32)">
            <summary>
             移除位于指定索引处的 System.Collections.Generic.IList`1 项。
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:RRQMCore.Concurrent.ConcurrentList`1.ToString">
            <summary>
            重写ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Data.Converter.CollectionConvert">
            <summary>
            集合转换器
            </summary>
        </member>
        <member name="T:RRQMCore.Data.Converter.ValueConvert">
            <summary>
            值转换器
            </summary>
        </member>
        <member name="M:RRQMCore.Data.Converter.ValueConvert.IntConvert(System.String,System.Int32)">
            <summary>
            int型转换器
            </summary>
            <param name="valueString">数字字符串</param>
            <param name="defaultValue">默认值</param>
            <returns>返回值结果</returns>
        </member>
        <member name="M:RRQMCore.Data.Converter.ValueConvert.DoubleConvert(System.String,System.Double)">
            <summary>
            双精度值转换
            </summary>
            <param name="valueString">数字字符串</param>
            <param name="defaultValue">默认值</param>
            <returns>返回值结果</returns>
        </member>
        <member name="M:RRQMCore.Data.Converter.ValueConvert.EnumConvert``1(System.String,``0)">
            <summary>
            枚举类型转换
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="valueString">枚举字符串</param>
            <param name="defaultValue">默认值</param>
            <returns>返回值结果</returns>
        </member>
        <member name="T:RRQMCore.Data.Security.DataLock">
            <summary>
            数据锁,用于加密或解密
            </summary>
        </member>
        <member name="M:RRQMCore.Data.Security.DataLock.EncryptDES(System.Byte[],System.String)">
            <summary>
            使用3DES加密
            </summary>
            <param name="data">待加密字节</param>
            <param name="encryptKey">加密口令（长度为8）</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Data.Security.DataLock.DecryptDES(System.Byte[],System.String)">
            <summary>
            使用3DES解密
            </summary>
            <param name="data">待解密字节</param>
            <param name="decryptionKey">解密口令（长度为8）</param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Data.XML.XmlTool">
            <summary>
            xml主类
            </summary>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">文件路径，包含文件名</param>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.AttributeStorage(System.String,System.String,System.String)">
            <summary>
            单节点，单属性储存
            </summary>
            <param name="NodeName">节点名</param>
            <param name="Attribute_name">属性名</param>
            <param name="Attribute_value">属性值</param>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.AttributeStorage(System.String,System.String[],System.String[])">
            <summary>
            单节点，多属性存储
            </summary>
            <param name="NodeName">节点名</param>
            <param name="Attribute_name">属性集合</param>
            <param name="Attribute_value">属性值集合</param>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.AttributeStorage(System.String[],System.String[],System.String[])">
            <summary>
            单节点，单属性多集合存储
            </summary>
            <param name="NodeName">节点集合</param>
            <param name="Attribute_name">属性名集合</param>
            <param name="Attribute_value">属性值集合</param>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.AttributeStorage(System.String[],System.String[],System.Int32,System.String[][])">
            <summary>
            多节点，多属性，多集合存储
            </summary>
            <param name="NodeName">节点集合</param>
            <param name="Attribute_name">属性集合</param>
            <param name="AttributeNumber">每个节点的属性数量</param>
            <param name="Attribute_value">属性值集合</param>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.NodeStorage(System.String,System.String)">
            <summary>
            节点值存储
            </summary>
            <param name="NodeName">节点名</param>
            <param name="Text">文本</param>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchNode(System.String)">
            <summary>
            通过节点取值
            </summary>
            <param name="NodeName">节点名</param>
            <returns>取值失败返回null</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchNumber(System.String,System.String)">
            <summary>
            查找数字
            </summary>
            <param name="NodeName">节点名</param>
            <param name="Attribute_name">属性名</param>
            <returns>取值失败返回0</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchWords(System.String,System.String)">
            <summary>
            查找属性值
            </summary>
            <param name="NodeName">节点名</param>
            <param name="Attribute_name">属性名</param>
            <returns>取值失败返回null</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchBoolean(System.String,System.String)">
            <summary>
            查找布尔值
            </summary>
            <param name="NodeName">节点名</param>
            <param name="Attribute_name">属性值</param>
            <returns>返回查找结果，查询失败返回false</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchWords(System.String[],System.String[])">
            <summary>
            查找属性值集合
            </summary>
            <param name="NodeName">节点名集合</param>
            <param name="Attribute_name">属性名集合</param>
            <returns>文件不在返回null，单个属性不在返回“空”</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchWords(System.String,System.String,System.String)">
            <summary>
            通过确切属性值，属性名，查找其他属性值
            </summary>
            <param name="Attribute_name1">已知属性名</param>
            <param name="Attribute_value">已知属性值</param>
            <param name="Attribute_name2">待查属性名</param>
            <returns>待查属性值</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchAllAttributes(System.String)">
            <summary>
            查找节点的所有属性值
            </summary>
            <param name="NodeName">节点 名</param>
            <returns>返回查找键值对，查询失败返回null</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchBoolean(System.String,System.String,System.String)">
            <summary>
            通过确切属性值，属性名，查找其他属性的布尔值
            </summary>
            <param name="Attribute_name1">已知属性名</param>
            <param name="Attribute_value">已知属性值</param>
            <param name="Attribute_name2">待查属性名</param>
            <returns>待查布尔值，失败返回false</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.RemoveNode(System.String)">
            <summary>
            按节点名移除节点
            </summary>
            <param name="NodeName">节点名</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.RemoveNode(System.String,System.String)">
            <summary>
            按确切的属性名，属性值删除节点
            </summary>
            <param name="Attribute_name">属性名</param>
            <param name="Attribute_value">属性值</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.RemoveNode(System.String,System.DateTime)">
            <summary>
            如果节点中有日期属性，把日期之前的节点都删除
            </summary>
            <param name="Attribute_name">属性名</param>
            <param name="dateTime">截止时间</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.NodeExist(System.String)">
            <summary>
            判断节点是否存在
            </summary>
            <param name="NodeName">节点名</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.RemoveAllNode">
            <summary>
            删除所有节点，不包含子节点
            </summary>
            <returns>返回删除是否成功</returns>
        </member>
        <member name="T:RRQMCore.Diagnostics.TimeMeasurer">
            <summary>
            时间测量器
            </summary>
        </member>
        <member name="M:RRQMCore.Diagnostics.TimeMeasurer.Run(System.Action)">
            <summary>
            开始运行
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Event.EventArgs">
            <summary>
            若汝棋茗所有事件基类
            </summary>
        </member>
        <member name="T:RRQMCore.Exceptions.MessageNotFoundException">
            <summary>
            未找到消息异常类
            </summary>
        </member>
        <member name="M:RRQMCore.Exceptions.MessageNotFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="mes"></param>
        </member>
        <member name="T:RRQMCore.Exceptions.MessageRegisteredException">
            <summary>
            消息已注册
            </summary>
        </member>
        <member name="M:RRQMCore.Exceptions.MessageRegisteredException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="mes"></param>
        </member>
        <member name="T:RRQMCore.Exceptions.RRQMException">
            <summary>
            若汝棋茗程序集异常类基类
            </summary>
        </member>
        <member name="M:RRQMCore.Exceptions.RRQMException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMCore.Exceptions.RRQMException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RRQMCore.Exceptions.RRQMException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:RRQMCore.Exceptions.RRQMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:RRQMCore.IO.FileControler">
            <summary>
            文件操作
            </summary>
        </member>
        <member name="M:RRQMCore.IO.FileControler.GetFileHash(System.String)">
            <summary>
            获得文件Hash值
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.IO.FileControler.GetStreamHash(System.IO.Stream)">
            <summary>
            获得流Hash值
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.IO.FileControler.FileIsOpen(System.String)">
            <summary>
            判断文件是否被已打开
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Log.ILog">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:RRQMCore.Log.ILog.Debug(RRQMCore.Log.LogType,System.Object,System.String,System.String)">
            <summary>
            日志记录
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="message"></param>
            <param name="stackTrace"></param>
        </member>
        <member name="M:RRQMCore.Log.ILog.Debug(RRQMCore.Log.LogType,System.Object,System.String)">
            <summary>
            日志记录
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="message"></param>
        </member>
        <member name="T:RRQMCore.Log.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:RRQMCore.Log.LogType.Message">
            <summary>
            一般消息
            </summary>
        </member>
        <member name="F:RRQMCore.Log.LogType.Warning">
            <summary>
            警示消息
            </summary>
        </member>
        <member name="F:RRQMCore.Log.LogType.Error">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:RRQMCore.Run.AppMessenger">
            <summary>
            消息通知类
            </summary>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger.RegistAll">
            <summary>
            注册已加载程序集中直接或间接继承自IMassage接口的所有类，并创建新实例
            </summary>
        </member>
        <member name="P:RRQMCore.Run.AppMessenger.Default">
            <summary>
            默认单例实例
            </summary>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger.Register(RRQMCore.Run.IMessage,System.String,System.Action)">
            <summary>
            注册消息
            </summary>
            <param name="messageObject"></param>
            <param name="token"></param>
            <param name="action"></param>
            <exception cref="T:RRQMCore.Exceptions.MessageRegisteredException"></exception>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger.Register(RRQMCore.Run.IMessage)">
            <summary>
            注册消息
            </summary>
            <param name="messageObject"></param>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger.Register(RRQMCore.Run.IMessage,System.String,System.Reflection.MethodInfo)">
            <summary>
            注册消息
            </summary>
            <param name="messageObject"></param>
            <param name="token"></param>
            <param name="methodInfo"></param>
            <exception cref="T:RRQMCore.Exceptions.MessageRegisteredException"></exception>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger.Register``1(RRQMCore.Run.IMessage,System.String,System.Action{``0})">
            <summary>
            注册消息
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="messageObject"></param>
            <param name="token"></param>
            <param name="action"></param>
            <exception cref="T:RRQMCore.Exceptions.MessageRegisteredException"></exception>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger.Register``2(RRQMCore.Run.IMessage,System.String,System.Func{``0,``1})">
            <summary>
            注册
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <typeparam name="TReturn">返回值类型</typeparam>
            <param name="messageObject"></param>
            <param name="token"></param>
            <param name="action"></param>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger.Register``1(RRQMCore.Run.IMessage,System.String,System.Func{``0})">
            <summary>
            注册
            </summary>
            <typeparam name="TReturn">返回值类型</typeparam>
            <param name="messageObject"></param>
            <param name="token"></param>
            <param name="action"></param>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger.Unregister(RRQMCore.Run.IMessage)">
            <summary>
            卸载消息
            </summary>
            <param name="messageObject"></param>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger.Clear">
            <summary>
            清除所有消息
            </summary>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger.Send(System.String,System.Object[])">
            <summary>
            发送消息
            </summary>
            <param name="token"></param>
            <param name="parameters"></param>
            <exception cref="T:RRQMCore.Exceptions.MessageNotFoundException"></exception>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger.Send``1(System.String,System.Object[])">
            <summary>
            发送消息
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="token"></param>
            <param name="parameters"></param>
            <returns></returns>
            <exception cref="T:RRQMCore.Exceptions.MessageNotFoundException"></exception>
        </member>
        <member name="T:RRQMCore.Run.IMessage">
            <summary>
            消息接口
            </summary>
        </member>
        <member name="T:RRQMCore.Run.RegistMethodAttribute">
            <summary>
            注册为消息
            </summary>
        </member>
        <member name="M:RRQMCore.Run.RegistMethodAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMCore.Run.RegistMethodAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="token"></param>
        </member>
        <member name="P:RRQMCore.Run.RegistMethodAttribute.Token">
            <summary>
            标识
            </summary>
        </member>
        <member name="T:RRQMCore.Run.TimeRun">
            <summary>
            时间执行
            </summary>
        </member>
        <member name="M:RRQMCore.Run.TimeRun.Run(System.Action,System.TimeSpan)">
            <summary>
            执行
            </summary>
            <param name="action"></param>
            <param name="timeSpan"></param>
        </member>
        <member name="M:RRQMCore.Run.TimeRun.Run(System.Action,System.Double)">
            <summary>
            执行
            </summary>
            <param name="action"></param>
            <param name="seconds"></param>
        </member>
        <member name="T:RRQMCore.Run.RRQMWaitHandle`1">
            <summary>
            等待处理数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMCore.Run.RRQMWaitHandle`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMCore.Run.RRQMWaitHandle`1.GetWaitData">
            <summary>
            获取一个可等待对象
            </summary>
        </member>
        <member name="M:RRQMCore.Run.RRQMWaitHandle`1.SetRun(System.Int32)">
            <summary>
            让等待对象恢复运行
            </summary>
            <param name="sign"></param>
        </member>
        <member name="M:RRQMCore.Run.RRQMWaitHandle`1.SetRun(System.Int32,`0)">
            <summary>
            让等待对象恢复运行
            </summary>
            <param name="sign"></param>
            <param name="waitResult"></param>
        </member>
        <member name="M:RRQMCore.Run.RRQMWaitHandle`1.SetRun(`0)">
            <summary>
            让等待对象恢复运行
            </summary>
            <param name="waitResult"></param>
        </member>
        <member name="T:RRQMCore.Run.WaitData`1">
            <summary>
            等待数据对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMCore.Run.WaitData`1.WaitResult">
            <summary>
            等待数据结果
            </summary>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.Wait(System.Int32)">
            <summary>
            等待指定毫秒
            </summary>
            <param name="millisecond"></param>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.Set">
            <summary>
            使等待的线程继续执行
            </summary>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.Dispose">
            <summary>
            回收
            </summary>
        </member>
        <member name="T:RRQMCore.Run.WaitResult">
            <summary>
            等待返回类
            </summary>
        </member>
        <member name="P:RRQMCore.Run.WaitResult.Sign">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:RRQMCore.Run.WaitResult.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:RRQMCore.Run.WaitResult.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:RRQMCore.Serialization.SerializeConvert">
            <summary>
            高性能序列化器
            </summary>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.CreatSerializeConvert(System.Int32)">
            <summary>
            创建一个高性能序列化器
            </summary>
            <param name="maxSize">允许序列化或反序列化的最大长度</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.CreatSerializeConvert(System.Int32,RRQMCore.ByteManager.BytePool)">
            <summary>
            创建一个高性能序列化器
            </summary>
            <param name="maxSize">允许序列化或反序列化的最大长度</param>
            <param name="bytePool">内存池实例</param>
            <returns></returns>
        </member>
        <member name="P:RRQMCore.Serialization.SerializeConvert.MaxSize">
            <summary>
            获取允许序列化或反序列化的最大长度
            </summary>
        </member>
        <member name="P:RRQMCore.Serialization.SerializeConvert.BytePool">
            <summary>
            获取或设置该序列化器的内存池实例
            </summary>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.BinarySerializeToBytes(System.Object)">
            <summary>
            二进制序列化对象
            </summary>
            <param name="obj"></param>
            <returns>返回流中的Buffer，非线程安全</returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.BinarySerializeToByteBlock(System.Object)">
            <summary>
            二进制序列化对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.BinaryDeserializeFromBytes``1(System.Byte[],System.Int32,System.Int32,System.Runtime.Serialization.SerializationBinder)">
            <summary>
            从Byte[]中反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="binder"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.BinaryDeserializeFromBytes``1(System.Byte[],System.Runtime.Serialization.SerializationBinder)">
            <summary>
            从Byte[]中反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="binder"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.BinaryDeserializeFromByteBlock``1(RRQMCore.ByteManager.ByteBlock,System.Runtime.Serialization.SerializationBinder)">
            <summary>
            从ByteBlock中反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="byteBlock"></param>
            <param name="binder"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.BinarySerialize(System.Object)">
            <summary>
            普通二进制序列化对象
            </summary>
            <param name="obj">数据对象</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.BinarySerializeToFile(System.Object,System.String)">
            <summary>
            二进制序列化对象至文件
            </summary>
            <param name="obj">数据对象</param>
            <param name="path">路径</param>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.BinaryDeserializeFromFile``1(System.String)">
            <summary>
            将二进制文件数据反序列化为指定类型对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.BinaryDeserialize``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将二进制数据反序列化为指定类型对象
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="data">数据</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.BinaryDeserialize``1(System.Byte[])">
            <summary>
            将二进制数据反序列化为指定类型对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlSerializeToString(System.Object,System.Text.Encoding)">
            <summary>
            Xml序列化数据对象
            </summary>
            <param name="obj">数据对象</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlSerializeToString(System.Object)">
            <summary>
            Xml序列化数据对象
            </summary>
            <param name="obj">数据对象</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlSerializeToBytes(System.Object)">
            <summary>
            Xml序列化数据对象
            </summary>
            <param name="obj">数据对象</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlSerializeToFile(System.Object,System.String)">
            <summary>
            Xml序列化至文件
            </summary>
            <param name="obj"></param>
            <param name="path"></param>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlDeserializeFromBytes``1(System.Byte[])">
            <summary>
            Xml反序列化
            </summary>
            <typeparam name="T">反序列化类型</typeparam>
            <param name="datas">数据</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlDeserializeFromBytes(System.Byte[],System.Type)">
            <summary>
            Xml反序列化
            </summary>
            <param name="datas"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlDeserializeFromString``1(System.String,System.Text.Encoding)">
            <summary>
            Xml反序列化
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="xmlString">xml字符串</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlDeserializeFromString``1(System.String)">
            <summary>
            Xml反序列化
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="xmlString">xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlDeserializeFromFile``1(System.String)">
            <summary>
            Xml反序列化
            </summary>
            <typeparam name="T">反序列化类型</typeparam>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
    </members>
</doc>
